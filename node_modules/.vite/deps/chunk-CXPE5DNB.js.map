{
  "version": 3,
  "sources": ["../../zimmerframe/src/walk.js"],
  "sourcesContent": ["/**\n * @template {{type: string}} T\n * @template {Record<string, any> | null} U\n * @param {T} node\n * @param {U} state\n * @param {import('./types').Visitors<T, U>} visitors\n */\nexport function walk(node, state, visitors) {\n\tconst universal = visitors._;\n\n\tlet stopped = false;\n\n\t/** @type {import('./types').Visitor<T, U, T>} _ */\n\tfunction default_visitor(_, { next, state }) {\n\t\tnext(state);\n\t}\n\n\t/**\n\t * @param {T} node\n\t * @param {T[]} path\n\t * @param {U} state\n\t * @returns {T | undefined}\n\t */\n\tfunction visit(node, path, state) {\n\t\t// Don't return the node here or it could lead to false-positive mutation detection\n\t\tif (stopped) return;\n\t\tif (!node.type) return;\n\n\t\t/** @type {T | void} */\n\t\tlet result;\n\n\t\t/** @type {Record<string, any>} */\n\t\tconst mutations = {};\n\n\t\t/** @type {import('./types').Context<T, U>} */\n\t\tconst context = {\n\t\t\tpath,\n\t\t\tstate,\n\t\t\tnext: (next_state = state) => {\n\t\t\t\tpath.push(node);\n\t\t\t\tfor (const key in node) {\n\t\t\t\t\tif (key === 'type') continue;\n\n\t\t\t\t\tconst child_node = node[key];\n\t\t\t\t\tif (child_node && typeof child_node === 'object') {\n\t\t\t\t\t\tif (Array.isArray(child_node)) {\n\t\t\t\t\t\t\t/** @type {Record<number, T>} */\n\t\t\t\t\t\t\tconst array_mutations = {};\n\n\t\t\t\t\t\t\tchild_node.forEach((node, i) => {\n\t\t\t\t\t\t\t\tif (node && typeof node === 'object') {\n\t\t\t\t\t\t\t\t\tconst result = visit(node, path, next_state);\n\t\t\t\t\t\t\t\t\tif (result) array_mutations[i] = result;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (Object.keys(array_mutations).length > 0) {\n\t\t\t\t\t\t\t\tmutations[key] = child_node.map(\n\t\t\t\t\t\t\t\t\t(node, i) => array_mutations[i] ?? node\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst result = visit(\n\t\t\t\t\t\t\t\t/** @type {T} */ (child_node),\n\t\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\t\tnext_state\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\t\tmutations[key] = result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tpath.pop();\n\n\t\t\t\tif (Object.keys(mutations).length > 0) {\n\t\t\t\t\treturn apply_mutations(node, mutations);\n\t\t\t\t}\n\t\t\t},\n\t\t\tstop: () => {\n\t\t\t\tstopped = true;\n\t\t\t},\n\t\t\tvisit: (next_node, next_state = state) => {\n\t\t\t\tpath.push(node);\n\t\t\t\tconst result = visit(next_node, path, next_state) ?? next_node;\n\t\t\t\tpath.pop();\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\n\t\tlet visitor = /** @type {import('./types').Visitor<T, U, T>} */ (\n\t\t\tvisitors[/** @type {T['type']} */ (node.type)] ?? default_visitor\n\t\t);\n\n\t\tif (universal) {\n\t\t\t/** @type {T | void} */\n\t\t\tlet inner_result;\n\n\t\t\tresult = universal(node, {\n\t\t\t\t...context,\n\t\t\t\t/** @param {U} next_state */\n\t\t\t\tnext: (next_state = state) => {\n\t\t\t\t\tstate = next_state; // make it the default for subsequent specialised visitors\n\n\t\t\t\t\tinner_result = visitor(node, {\n\t\t\t\t\t\t...context,\n\t\t\t\t\t\tstate: next_state\n\t\t\t\t\t});\n\n\t\t\t\t\treturn inner_result;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// @ts-expect-error TypeScript doesn't understand that `context.next(...)` is called immediately\n\t\t\tif (!result && inner_result) {\n\t\t\t\tresult = inner_result;\n\t\t\t}\n\t\t} else {\n\t\t\tresult = visitor(node, context);\n\t\t}\n\n\t\tif (!result) {\n\t\t\tif (Object.keys(mutations).length > 0) {\n\t\t\t\tresult = apply_mutations(node, mutations);\n\t\t\t}\n\t\t}\n\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\treturn visit(node, [], state) ?? node;\n}\n\n/**\n * @template {Record<string, any>} T\n * @param {T} node\n * @param {Record<string, any>} mutations\n * @returns {T}\n */\nfunction apply_mutations(node, mutations) {\n\t/** @type {Record<string, any>} */\n\tconst obj = {};\n\n\tconst descriptors = Object.getOwnPropertyDescriptors(node);\n\n\tfor (const key in descriptors) {\n\t\tObject.defineProperty(obj, key, descriptors[key]);\n\t}\n\n\tfor (const key in mutations) {\n\t\tobj[key] = mutations[key];\n\t}\n\n\treturn /** @type {T} */ (obj);\n}\n"],
  "mappings": "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",
  "names": ["state", "node", "result"]
}
